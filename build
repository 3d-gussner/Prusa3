#!/usr/bin/env php
<?php

class ScadRenderer
{
    protected $cmd;

    public function __construct($cmd)
    {
        $this->cmd = $cmd;
    }

    public function exportFile($scadFile, $dstFile)
    {
        if (!file_exists($scadFile)) {
            throw new \Exception(sprintf('Could not find file: `%s`', $scadFile));
        }

        $cmd = sprintf('%s -o %s %s', $this->cmd, $dstFile, $scadFile);
        system($cmd);
    }

    public function isFile2D($fn)
    {
        if (!file_exists($fn)) {
            throw new \Exception(sprintf('Could not find file: `%s`', $fn));
        }

        $c = file_get_contents($fn);

        $c2d = 0;
        foreach (['circle', 'square', 'polygon', 'text'] as $s) {
            if (stripos($c, $s . '(') !== false || stripos($c, $s . '(') !== false) {
                $c2d++;
            }
        }

        $c3d = 0;
        foreach (['sphere', 'cube', 'cylinder', 'polyhedron'] as $s) {
            if (stripos($c, $s . '(') !== false || stripos($c, $s . '(') !== false) {
                $c3d++;
            }
        }

        if (preg_match_all('/(translate|rotate|scale|resize|mirror)\W?\(\[([0-9.\-,]+)\]/', $c, $m)) {
            foreach ($m[2] as $v) {
                $i = substr_count($v, ',');
                if ($i === 1) {
                    $c2d += $i;
                }
                if ($i === 2) {
                    $c3d += $i;
                }
            }
        }

        return $c2d != 0 && $c2d >= $c3d;
    }
}

class Cache
{
    protected $cacheFile;
    protected $memory = [];

    public function __construct($cacheFile)
    {
        $this->cacheFile = $cacheFile;
        $this->memory = $this->loadCacheFile($cacheFile);
    }

    protected function loadCacheFile($cacheFile)
    {
        if (!file_exists($cacheFile)) {
            return [];
        }

        return json_decode(file_get_contents($cacheFile), true);
    }

    public function hasChanged($fn)
    {
        if (!isset($this->memory[$fn])) {
            return true;
        }

        return md5_file($fn) != $this->memory[$fn];
    }

    public function store($fn)
    {
        $this->memory[$fn] = md5_file($fn);
        file_put_contents($this->cacheFile, json_encode($this->memory, JSON_PRETTY_PRINT));
    }
}


$skipFiles = [
    'power-supply-terminal-cover',
];

$o = new ScadRenderer('/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD');
$c = new Cache(__DIR__ . '/.cache');

$l = strlen(getcwd());
foreach (glob(__DIR__ . '/src/*.scad') as $file) {
    if (in_array(basename($file, '.scad'), $skipFiles)) {
        continue;
    }

    $scadFile = substr($file, $l+1);
    $dstFile = sprintf('distribution/%s.stl', basename($file, '.scad'));
    if ($o->isFile2D($scadFile)) {
        $dstFile = sprintf('distribution/%s.dxf', basename($file, '.scad'));
    }
    print "== Building $scadFile -> $dstFile\n";

    $pngFile = sprintf('images/%s.png', basename($file, '.scad'));

    if (!$c->hasChanged($scadFile) && file_exists($dstFile) && file_exists($pngFile)) {
        continue;
    }

    $o->exportFile($scadFile, $dstFile);
    $o->exportFile($scadFile, $pngFile);

    // Save the hash to cache
    $c->store($scadFile);
}
