#!/usr/bin/env php
<?php

class ScadRenderer
{
    protected $cmd;

    public function __construct($cmd)
    {
        $this->cmd = $cmd;
    }

    public function exportFile($scadFile, $dstFile, $params = [])
    {
        if (!file_exists($scadFile)) {
            throw new \Exception(sprintf('Could not find file: `%s`', $scadFile));
        }

        $paramsCmd = ['-o ' . $dstFile];
        if (!empty($params)) {
            foreach ($params as $k => $v) {
                $paramsCmd[] = sprintf('--%s=%s', $k, $v);
            }
        }

        $cmd = $this->cmd . ' ' . implode(' ', $paramsCmd) . ' ' . $scadFile;
        print $cmd . "\n";
        system($cmd);
    }

    public function getParams($fn)
    {
        if (!file_exists($fn)) {
            throw new \Exception(sprintf('Could not find file: `%s`', $fn));
        }

        $r = [];
        $c = file_get_contents($fn);
        foreach (explode("\n", $c) as $line) {
            if (!preg_match('/([A-Za-z].+):\W(.*)$/', $line, $m)) {
                continue;
            }

            $r[strtolower($m[1])] = trim($m[2]);
        }

        return $r;
    }

    public function isFile2D($fn)
    {
        if (!file_exists($fn)) {
            throw new \Exception(sprintf('Could not find file: `%s`', $fn));
        }

        $c = file_get_contents($fn);

        $c2d = 0;
        foreach (['circle', 'square', 'polygon', 'text'] as $s) {
            if (stripos($c, $s . '(') !== false || stripos($c, $s . '(') !== false) {
                $c2d++;
            }
        }

        $c3d = 0;
        foreach (['sphere', 'cube', 'cylinder', 'polyhedron'] as $s) {
            if (stripos($c, $s . '(') !== false || stripos($c, $s . '(') !== false) {
                $c3d++;
            }
        }

        if (preg_match_all('/(translate|rotate|scale|resize|mirror)\W?\(\[([0-9.\-,]+)\]/', $c, $m)) {
            foreach ($m[2] as $v) {
                $i = substr_count($v, ',');
                if ($i === 1) {
                    $c2d += $i;
                }
                if ($i === 2) {
                    $c3d += $i;
                }
            }
        }

        return $c2d != 0 && $c2d >= $c3d;
    }
}

class Cache
{
    protected $cacheFile;
    protected $memory = [];

    public function __construct($cacheFile)
    {
        $this->cacheFile = $cacheFile;
        $this->memory = $this->loadCacheFile($cacheFile);
    }

    protected function loadCacheFile($cacheFile)
    {
        if (!file_exists($cacheFile)) {
            return [];
        }

        return json_decode(file_get_contents($cacheFile), true);
    }

    public function hasChanged($fn)
    {
        if (!isset($this->memory[$fn])) {
            return true;
        }

        return md5_file($fn) != $this->memory[$fn];
    }

    public function store($fn)
    {
        $this->memory[$fn] = md5_file($fn);
        file_put_contents($this->cacheFile, json_encode($this->memory, JSON_PRETTY_PRINT));
    }
}

function write_overview_file($file, $images)
{
    $lines = ['# Models', ''];
    foreach ($images as $img) {
        $basename = basename($img['fn'], '.png');

        $lines[] = sprintf('## %s (%s.scad)', $img['name'], $basename);
        if (!empty($img['desc'])) {
            $lines[] = sprintf('%s', $img['desc']);
        }
        $lines[] = sprintf('![%s (%s.scad)](./images/%s "%s")', $img['name'], $basename, $img['fn'], (empty($img['desc']) ? $img['name'] : $img['desc']));
        $lines[] = sprintf('[OpenSCAD file](./src/%s.scad) | [STL file](./distribution/%s.stl)', $basename, $basename);
        $lines[] = '';
    }

    file_put_contents($file, trim(implode("\n", $lines)) . "\n");
}


$o = new ScadRenderer('/Applications/OpenSCAD.app/Contents/MacOS/OpenSCAD');
$c = new Cache(__DIR__ . '/.cache');

$l = strlen(getcwd());
foreach (glob(__DIR__ . '/src/*.scad') as $file) {
    if (in_array(basename($file, '.scad'), ['power-supply-terminal-cover'])) {
        continue;
    }

    $scadFile = substr($file, $l+1);
    $dstFile = sprintf('distribution/%s.stl', basename($file, '.scad'));
    if ($o->isFile2D($scadFile)) {
        $dstFile = sprintf('distribution/%s.dxf', basename($file, '.scad'));
    }
    print "== Building $scadFile -> $dstFile\n";

    $pngFile = sprintf('images/%s.png', basename($file, '.scad'));

    if (!$c->hasChanged($scadFile) && file_exists($dstFile) && file_exists($pngFile)) {
        continue;
    }

    // STL files
    $o->exportFile($scadFile, $dstFile);

    // Images
    $p = $o->getParams($scadFile);
    $p['imgsize'] = '200,200';
    $o->exportFile($scadFile, $pngFile, array_intersect_key($p, array_flip(['camera','imgsize'])));

    // Save the hash to cache
    $c->store($scadFile);
}

$images = [];
foreach (glob(__DIR__ . '/images/*.png') as $file) {
    $name = $fn = basename($file, '.png');
    $desc = '';
    $scadFile = __DIR__ . '/src/' . $fn . '.scad';
    if (!file_exists($scadFile)) {
        continue;
    }

    $p = $o->getParams($scadFile);
    if (isset($p['name'])) {
        $name = $p['name'];
    }
    if (isset($p['desc'])) {
        $desc = $p['desc'];
    }

    $fn = basename($file);
    $images[] = compact('fn', 'name', 'desc');
}

write_overview_file(__DIR__ . '/models.md', $images);
